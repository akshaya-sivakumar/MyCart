// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'sqlite_model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:SqlUser.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// SqlUser TABLE
class TableSqlUser extends SqfEntityTableBase {
  TableSqlUser() {
    // declare properties of EntityTable
    tableName = 'user';
    primaryKeyName = 'userId';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('userName', DbType.text),
      SqfEntityFieldBase('passWord', DbType.text),
      SqfEntityFieldBase('profile', DbType.text),
      SqfEntityFieldBase('dateOfBirth', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSqlUser();
  }
}

// SqlProducts TABLE
class TableSqlProducts extends SqfEntityTableBase {
  TableSqlProducts() {
    // declare properties of EntityTable
    tableName = 'products';
    primaryKeyName = 'productId';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('userId', DbType.text),
      SqfEntityFieldBase('orderId', DbType.text),
      SqfEntityFieldBase('categoryName', DbType.text),
      SqfEntityFieldBase('productName', DbType.text),
      SqfEntityFieldBase('modelNumber', DbType.text),
      SqfEntityFieldBase('price', DbType.text),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('manufactureDate', DbType.text),
      SqfEntityFieldBase('manufactureAddress', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSqlProducts();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class Cart extends SqfEntityModelProvider {
  Cart() {
    databaseName = cart.databaseName;
    password = cart.password;
    dbVersion = cart.dbVersion;
    preSaveAction = cart.preSaveAction;
    logFunction = cart.logFunction;
    databaseTables = [
      TableSqlUser.getInstance,
      TableSqlProducts.getInstance,
    ];

    bundledDatabasePath = cart
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = cart.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region SqlUser
class SqlUser extends TableBase {
  SqlUser(
      {this.userId,
      this.userName,
      this.passWord,
      this.profile,
      this.dateOfBirth,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  SqlUser.withFields(this.userName, this.passWord, this.profile,
      this.dateOfBirth, this.isDeleted) {
    _setDefaultValues();
  }
  SqlUser.withId(this.userId, this.userName, this.passWord, this.profile,
      this.dateOfBirth, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  SqlUser.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    userId = int.tryParse(o['userId'].toString());
    if (o['userName'] != null) {
      userName = o['userName'].toString();
    }
    if (o['passWord'] != null) {
      passWord = o['passWord'].toString();
    }
    if (o['profile'] != null) {
      profile = o['profile'].toString();
    }
    if (o['dateOfBirth'] != null) {
      dateOfBirth = o['dateOfBirth'].toString();
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (SqlUser)
  int? userId;
  String? userName;
  String? passWord;
  String? profile;
  String? dateOfBirth;
  bool? isDeleted;

  // end FIELDS (SqlUser)

  static const bool _softDeleteActivated = true;
  SqlUserManager? __mnSqlUser;

  SqlUserManager get _mnSqlUser {
    return __mnSqlUser = __mnSqlUser ?? SqlUserManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['userId'] = userId;
    if (userName != null || !forView) {
      map['userName'] = userName;
    }
    if (passWord != null || !forView) {
      map['passWord'] = passWord;
    }
    if (profile != null || !forView) {
      map['profile'] = profile;
    }
    if (dateOfBirth != null || !forView) {
      map['dateOfBirth'] = dateOfBirth;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['userId'] = userId;
    if (userName != null || !forView) {
      map['userName'] = userName;
    }
    if (passWord != null || !forView) {
      map['passWord'] = passWord;
    }
    if (profile != null || !forView) {
      map['profile'] = profile;
    }
    if (dateOfBirth != null || !forView) {
      map['dateOfBirth'] = dateOfBirth;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [SqlUser]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [SqlUser]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [userName, passWord, profile, dateOfBirth, isDeleted];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [userId, userName, passWord, profile, dateOfBirth, isDeleted];
  }

  static Future<List<SqlUser>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SqlUser.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<SqlUser>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <SqlUser>[];
    try {
      objList = list
          .map((sqluser) => SqlUser.fromMap(sqluser as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SqlUser.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<SqlUser>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<SqlUser> objList = <SqlUser>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = SqlUser.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns SqlUser by ID if exist, otherwise returns null
  /// Primary Keys: int? userId
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [SqlUser] if exist, otherwise returns null
  Future<SqlUser?> getById(int? userId,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (userId == null) {
      return null;
    }
    SqlUser? obj;
    final data = await _mnSqlUser.getById([userId]);
    if (data.length != 0) {
      obj = SqlUser.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (SqlUser) object. If the userId field is null, saves as a new record and returns new userId, if userId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns userId
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (userId == null || userId == 0) {
      userId = await _mnSqlUser.insert(this, ignoreBatch);
    } else {
      await _mnSqlUser.update(this);
    }

    return userId;
  }

  /// Saves the (SqlUser) object. If the userId field is null, saves as a new record and returns new userId, if userId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns userId
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (userId == null || userId == 0) {
      userId = await _mnSqlUser.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // userId= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSqlUser.updateOrThrow(this);
    }

    return userId;
  }

  /// saveAs SqlUser. Returns a new Primary Key value of SqlUser

  /// <returns>Returns a new Primary Key value of SqlUser
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    userId = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<SqlUser> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<SqlUser> sqlusers) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Cart().batchStart();
    for (final obj in sqlusers) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Cart().batchCommit();
      for (int i = 0; i < sqlusers.length; i++) {
        if (sqlusers[i].userId == null) {
          sqlusers[i].userId = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns userId
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSqlUser.rawInsert(
          'INSERT OR REPLACE INTO user (userId, userName, passWord, profile, dateOfBirth,isDeleted)  VALUES (?,?,?,?,?,?)',
          [userId, userName, passWord, profile, dateOfBirth, isDeleted],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'SqlUser userId=$userId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'SqlUser userId=$userId did not update');
      }
      return userId;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'SqlUser Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<SqlUser>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<SqlUser> sqlusers) async {
    final results = await _mnSqlUser.rawInsertAll(
        'INSERT OR REPLACE INTO user (userId, userName, passWord, profile, dateOfBirth,isDeleted)  VALUES (?,?,?,?,?,?)',
        sqlusers);
    return results;
  }

  /// Deletes SqlUser

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete SqlUser invoked (userId=$userId)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnSqlUser.delete(
          QueryParams(whereString: 'userId=?', whereArguments: [userId]));
    } else {
      return _mnSqlUser.updateBatch(
          QueryParams(whereString: 'userId=?', whereArguments: [userId]),
          {'isDeleted': 1});
    }
  }

  /// Recover SqlUser

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover SqlUser invoked (userId=$userId)');
    {
      return _mnSqlUser.updateBatch(
          QueryParams(whereString: 'userId=?', whereArguments: [userId]),
          {'isDeleted': 0});
    }
  }

  @override
  SqlUserFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SqlUserFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SqlUserFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SqlUserFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      userId = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion sqluser

// region SqlUserField
class SqlUserField extends FilterBase {
  SqlUserField(SqlUserFilterBuilder sqluserFB) : super(sqluserFB);

  @override
  SqlUserFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SqlUserFilterBuilder;
  }

  @override
  SqlUserFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SqlUserFilterBuilder;
  }

  @override
  SqlUserFilterBuilder isNull() {
    return super.isNull() as SqlUserFilterBuilder;
  }

  @override
  SqlUserFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SqlUserFilterBuilder;
  }

  @override
  SqlUserFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SqlUserFilterBuilder;
  }

  @override
  SqlUserFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SqlUserFilterBuilder;
  }

  @override
  SqlUserFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SqlUserFilterBuilder;
  }

  @override
  SqlUserFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SqlUserFilterBuilder;
  }

  @override
  SqlUserFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SqlUserFilterBuilder;
  }

  @override
  SqlUserFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SqlUserFilterBuilder;
  }

  @override
  SqlUserFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SqlUserFilterBuilder;
  }

  @override
  SqlUserFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SqlUserFilterBuilder;
  }

  @override
  SqlUserField get not {
    return super.not as SqlUserField;
  }
}
// endregion SqlUserField

// region SqlUserFilterBuilder
class SqlUserFilterBuilder extends ConjunctionBase {
  SqlUserFilterBuilder(SqlUser obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnSqlUser = obj._mnSqlUser;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SqlUserManager? _mnSqlUser;

  /// put the sql keyword 'AND'
  @override
  SqlUserFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SqlUserFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SqlUserFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SqlUserFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SqlUserFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SqlUserFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SqlUserFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SqlUserFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SqlUserFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SqlUserFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SqlUserFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SqlUserField _setField(SqlUserField? field, String colName, DbType dbtype) {
    return SqlUserField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SqlUserField? _userId;
  SqlUserField get userId {
    return _userId = _setField(_userId, 'userId', DbType.integer);
  }

  SqlUserField? _userName;
  SqlUserField get userName {
    return _userName = _setField(_userName, 'userName', DbType.text);
  }

  SqlUserField? _passWord;
  SqlUserField get passWord {
    return _passWord = _setField(_passWord, 'passWord', DbType.text);
  }

  SqlUserField? _profile;
  SqlUserField get profile {
    return _profile = _setField(_profile, 'profile', DbType.text);
  }

  SqlUserField? _dateOfBirth;
  SqlUserField get dateOfBirth {
    return _dateOfBirth = _setField(_dateOfBirth, 'dateOfBirth', DbType.text);
  }

  SqlUserField? _isDeleted;
  SqlUserField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<SqlUser> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSqlUser!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSqlUser!.delete(qparams);
    }
    return r;
  }

  /// Recover List<SqlUser> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover SqlUser bulk invoked');
    return _mnSqlUser!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'userId IN (SELECT userId from user ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSqlUser!.updateBatch(qparams, values);
  }

  /// This method always returns [SqlUser] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SqlUser?
  @override
  Future<SqlUser?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSqlUser!.toList(qparams);
    final data = await objFuture;
    SqlUser? obj;
    if (data.isNotEmpty) {
      obj = SqlUser.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [SqlUser]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SqlUser?
  @override
  Future<SqlUser> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        SqlUser();
  }

  /// This method returns int. [SqlUser]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? sqluserCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final sqlusersFuture = await _mnSqlUser!.toList(qparams);
    final int count = sqlusersFuture[0]['CNT'] as int;
    if (sqluserCount != null) {
      sqluserCount(count);
    }
    return count;
  }

  /// This method returns List<SqlUser> [SqlUser]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<SqlUser>
  @override
  Future<List<SqlUser>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<SqlUser> sqlusersData = await SqlUser.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return sqlusersData;
  }

  /// This method returns Json String [SqlUser]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [SqlUser]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [SqlUser]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSqlUser!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [SqlUser]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `userId` FROM user WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> userIdData = <int>[];
    qparams.selectColumns = ['userId'];
    final userIdFuture = await _mnSqlUser!.toList(qparams);

    final int count = userIdFuture.length;
    for (int i = 0; i < count; i++) {
      userIdData.add(userIdFuture[i]['userId'] as int);
    }
    return userIdData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [SqlUser]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSqlUser!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await SqlUser.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSqlUser!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SqlUserFilterBuilder

// region SqlUserFields
class SqlUserFields {
  static TableField? _fUserId;
  static TableField get userId {
    return _fUserId =
        _fUserId ?? SqlSyntax.setField(_fUserId, 'userid', DbType.integer);
  }

  static TableField? _fUserName;
  static TableField get userName {
    return _fUserName =
        _fUserName ?? SqlSyntax.setField(_fUserName, 'userName', DbType.text);
  }

  static TableField? _fPassWord;
  static TableField get passWord {
    return _fPassWord =
        _fPassWord ?? SqlSyntax.setField(_fPassWord, 'passWord', DbType.text);
  }

  static TableField? _fProfile;
  static TableField get profile {
    return _fProfile =
        _fProfile ?? SqlSyntax.setField(_fProfile, 'profile', DbType.text);
  }

  static TableField? _fDateOfBirth;
  static TableField get dateOfBirth {
    return _fDateOfBirth = _fDateOfBirth ??
        SqlSyntax.setField(_fDateOfBirth, 'dateOfBirth', DbType.text);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion SqlUserFields

//region SqlUserManager
class SqlUserManager extends SqfEntityProvider {
  SqlUserManager()
      : super(Cart(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'user';
  static const List<String> _primaryKeyList = ['userId'];
  static const String _whereStr = 'userId=?';
}

//endregion SqlUserManager
// region SqlProducts
class SqlProducts extends TableBase {
  SqlProducts(
      {this.productId,
      this.userId,
      this.orderId,
      this.categoryName,
      this.productName,
      this.modelNumber,
      this.price,
      this.description,
      this.manufactureDate,
      this.manufactureAddress,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  SqlProducts.withFields(
      this.userId,
      this.orderId,
      this.categoryName,
      this.productName,
      this.modelNumber,
      this.price,
      this.description,
      this.manufactureDate,
      this.manufactureAddress,
      this.isDeleted) {
    _setDefaultValues();
  }
  SqlProducts.withId(
      this.productId,
      this.userId,
      this.orderId,
      this.categoryName,
      this.productName,
      this.modelNumber,
      this.price,
      this.description,
      this.manufactureDate,
      this.manufactureAddress,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  SqlProducts.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    productId = int.tryParse(o['productId'].toString());
    if (o['userId'] != null) {
      userId = o['userId'].toString();
    }
    if (o['orderId'] != null) {
      orderId = o['orderId'].toString();
    }
    if (o['categoryName'] != null) {
      categoryName = o['categoryName'].toString();
    }
    if (o['productName'] != null) {
      productName = o['productName'].toString();
    }
    if (o['modelNumber'] != null) {
      modelNumber = o['modelNumber'].toString();
    }
    if (o['price'] != null) {
      price = o['price'].toString();
    }
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['manufactureDate'] != null) {
      manufactureDate = o['manufactureDate'].toString();
    }
    if (o['manufactureAddress'] != null) {
      manufactureAddress = o['manufactureAddress'].toString();
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (SqlProducts)
  int? productId;
  String? userId;
  String? orderId;
  String? categoryName;
  String? productName;
  String? modelNumber;
  String? price;
  String? description;
  String? manufactureDate;
  String? manufactureAddress;
  bool? isDeleted;

  // end FIELDS (SqlProducts)

  static const bool _softDeleteActivated = true;
  SqlProductsManager? __mnSqlProducts;

  SqlProductsManager get _mnSqlProducts {
    return __mnSqlProducts = __mnSqlProducts ?? SqlProductsManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['productId'] = productId;
    if (userId != null || !forView) {
      map['userId'] = userId;
    }
    if (orderId != null || !forView) {
      map['orderId'] = orderId;
    }
    if (categoryName != null || !forView) {
      map['categoryName'] = categoryName;
    }
    if (productName != null || !forView) {
      map['productName'] = productName;
    }
    if (modelNumber != null || !forView) {
      map['modelNumber'] = modelNumber;
    }
    if (price != null || !forView) {
      map['price'] = price;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (manufactureDate != null || !forView) {
      map['manufactureDate'] = manufactureDate;
    }
    if (manufactureAddress != null || !forView) {
      map['manufactureAddress'] = manufactureAddress;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['productId'] = productId;
    if (userId != null || !forView) {
      map['userId'] = userId;
    }
    if (orderId != null || !forView) {
      map['orderId'] = orderId;
    }
    if (categoryName != null || !forView) {
      map['categoryName'] = categoryName;
    }
    if (productName != null || !forView) {
      map['productName'] = productName;
    }
    if (modelNumber != null || !forView) {
      map['modelNumber'] = modelNumber;
    }
    if (price != null || !forView) {
      map['price'] = price;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (manufactureDate != null || !forView) {
      map['manufactureDate'] = manufactureDate;
    }
    if (manufactureAddress != null || !forView) {
      map['manufactureAddress'] = manufactureAddress;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [SqlProducts]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [SqlProducts]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      userId,
      orderId,
      categoryName,
      productName,
      modelNumber,
      price,
      description,
      manufactureDate,
      manufactureAddress,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      productId,
      userId,
      orderId,
      categoryName,
      productName,
      modelNumber,
      price,
      description,
      manufactureDate,
      manufactureAddress,
      isDeleted
    ];
  }

  static Future<List<SqlProducts>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SqlProducts.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<SqlProducts>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <SqlProducts>[];
    try {
      objList = list
          .map((sqlproducts) =>
              SqlProducts.fromMap(sqlproducts as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SqlProducts.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<SqlProducts>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<SqlProducts> objList = <SqlProducts>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = SqlProducts.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns SqlProducts by ID if exist, otherwise returns null
  /// Primary Keys: int? productId
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [SqlProducts] if exist, otherwise returns null
  Future<SqlProducts?> getById(int? productId,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (productId == null) {
      return null;
    }
    SqlProducts? obj;
    final data = await _mnSqlProducts.getById([productId]);
    if (data.length != 0) {
      obj = SqlProducts.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (SqlProducts) object. If the productId field is null, saves as a new record and returns new productId, if productId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns productId
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (productId == null || productId == 0) {
      productId = await _mnSqlProducts.insert(this, ignoreBatch);
    } else {
      await _mnSqlProducts.update(this);
    }

    return productId;
  }

  /// Saves the (SqlProducts) object. If the productId field is null, saves as a new record and returns new productId, if productId is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns productId
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (productId == null || productId == 0) {
      productId = await _mnSqlProducts.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // productId= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSqlProducts.updateOrThrow(this);
    }

    return productId;
  }

  /// saveAs SqlProducts. Returns a new Primary Key value of SqlProducts

  /// <returns>Returns a new Primary Key value of SqlProducts
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    productId = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<SqlProducts> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<SqlProducts> sqlproductses) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await Cart().batchStart();
    for (final obj in sqlproductses) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await Cart().batchCommit();
      for (int i = 0; i < sqlproductses.length; i++) {
        if (sqlproductses[i].productId == null) {
          sqlproductses[i].productId = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns productId
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSqlProducts.rawInsert(
          'INSERT OR REPLACE INTO products (productId, userId, orderId, categoryName, productName, modelNumber, price, description, manufactureDate, manufactureAddress,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
          [
            productId,
            userId,
            orderId,
            categoryName,
            productName,
            modelNumber,
            price,
            description,
            manufactureDate,
            manufactureAddress,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'SqlProducts productId=$productId updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'SqlProducts productId=$productId did not update');
      }
      return productId;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'SqlProducts Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<SqlProducts>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<SqlProducts> sqlproductses) async {
    final results = await _mnSqlProducts.rawInsertAll(
        'INSERT OR REPLACE INTO products (productId, userId, orderId, categoryName, productName, modelNumber, price, description, manufactureDate, manufactureAddress,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        sqlproductses);
    return results;
  }

  /// Deletes SqlProducts

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete SqlProducts invoked (productId=$productId)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnSqlProducts.delete(
          QueryParams(whereString: 'productId=?', whereArguments: [productId]));
    } else {
      return _mnSqlProducts.updateBatch(
          QueryParams(whereString: 'productId=?', whereArguments: [productId]),
          {'isDeleted': 1});
    }
  }

  /// Recover SqlProducts

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint(
        'SQFENTITIY: recover SqlProducts invoked (productId=$productId)');
    {
      return _mnSqlProducts.updateBatch(
          QueryParams(whereString: 'productId=?', whereArguments: [productId]),
          {'isDeleted': 0});
    }
  }

  @override
  SqlProductsFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SqlProductsFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SqlProductsFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SqlProductsFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      productId = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion sqlproducts

// region SqlProductsField
class SqlProductsField extends FilterBase {
  SqlProductsField(SqlProductsFilterBuilder sqlproductsFB)
      : super(sqlproductsFB);

  @override
  SqlProductsFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsFilterBuilder isNull() {
    return super.isNull() as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SqlProductsFilterBuilder;
  }

  @override
  SqlProductsField get not {
    return super.not as SqlProductsField;
  }
}
// endregion SqlProductsField

// region SqlProductsFilterBuilder
class SqlProductsFilterBuilder extends ConjunctionBase {
  SqlProductsFilterBuilder(SqlProducts obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnSqlProducts = obj._mnSqlProducts;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SqlProductsManager? _mnSqlProducts;

  /// put the sql keyword 'AND'
  @override
  SqlProductsFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SqlProductsFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SqlProductsFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SqlProductsFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SqlProductsFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SqlProductsFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SqlProductsFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SqlProductsFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SqlProductsFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SqlProductsFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SqlProductsFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SqlProductsField _setField(
      SqlProductsField? field, String colName, DbType dbtype) {
    return SqlProductsField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SqlProductsField? _productId;
  SqlProductsField get productId {
    return _productId = _setField(_productId, 'productId', DbType.integer);
  }

  SqlProductsField? _userId;
  SqlProductsField get userId {
    return _userId = _setField(_userId, 'userId', DbType.text);
  }

  SqlProductsField? _orderId;
  SqlProductsField get orderId {
    return _orderId = _setField(_orderId, 'orderId', DbType.text);
  }

  SqlProductsField? _categoryName;
  SqlProductsField get categoryName {
    return _categoryName =
        _setField(_categoryName, 'categoryName', DbType.text);
  }

  SqlProductsField? _productName;
  SqlProductsField get productName {
    return _productName = _setField(_productName, 'productName', DbType.text);
  }

  SqlProductsField? _modelNumber;
  SqlProductsField get modelNumber {
    return _modelNumber = _setField(_modelNumber, 'modelNumber', DbType.text);
  }

  SqlProductsField? _price;
  SqlProductsField get price {
    return _price = _setField(_price, 'price', DbType.text);
  }

  SqlProductsField? _description;
  SqlProductsField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  SqlProductsField? _manufactureDate;
  SqlProductsField get manufactureDate {
    return _manufactureDate =
        _setField(_manufactureDate, 'manufactureDate', DbType.text);
  }

  SqlProductsField? _manufactureAddress;
  SqlProductsField get manufactureAddress {
    return _manufactureAddress =
        _setField(_manufactureAddress, 'manufactureAddress', DbType.text);
  }

  SqlProductsField? _isDeleted;
  SqlProductsField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<SqlProducts> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSqlProducts!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSqlProducts!.delete(qparams);
    }
    return r;
  }

  /// Recover List<SqlProducts> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover SqlProducts bulk invoked');
    return _mnSqlProducts!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'productId IN (SELECT productId from products ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSqlProducts!.updateBatch(qparams, values);
  }

  /// This method always returns [SqlProducts] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SqlProducts?
  @override
  Future<SqlProducts?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSqlProducts!.toList(qparams);
    final data = await objFuture;
    SqlProducts? obj;
    if (data.isNotEmpty) {
      obj = SqlProducts.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [SqlProducts]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SqlProducts?
  @override
  Future<SqlProducts> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        SqlProducts();
  }

  /// This method returns int. [SqlProducts]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? sqlproductsCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final sqlproductsesFuture = await _mnSqlProducts!.toList(qparams);
    final int count = sqlproductsesFuture[0]['CNT'] as int;
    if (sqlproductsCount != null) {
      sqlproductsCount(count);
    }
    return count;
  }

  /// This method returns List<SqlProducts> [SqlProducts]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<SqlProducts>
  @override
  Future<List<SqlProducts>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<SqlProducts> sqlproductsesData = await SqlProducts.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return sqlproductsesData;
  }

  /// This method returns Json String [SqlProducts]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [SqlProducts]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [SqlProducts]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSqlProducts!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [SqlProducts]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `productId` FROM products WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> productIdData = <int>[];
    qparams.selectColumns = ['productId'];
    final productIdFuture = await _mnSqlProducts!.toList(qparams);

    final int count = productIdFuture.length;
    for (int i = 0; i < count; i++) {
      productIdData.add(productIdFuture[i]['productId'] as int);
    }
    return productIdData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [SqlProducts]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSqlProducts!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await SqlProducts.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSqlProducts!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SqlProductsFilterBuilder

// region SqlProductsFields
class SqlProductsFields {
  static TableField? _fProductId;
  static TableField get productId {
    return _fProductId = _fProductId ??
        SqlSyntax.setField(_fProductId, 'productid', DbType.integer);
  }

  static TableField? _fUserId;
  static TableField get userId {
    return _fUserId =
        _fUserId ?? SqlSyntax.setField(_fUserId, 'userId', DbType.text);
  }

  static TableField? _fOrderId;
  static TableField get orderId {
    return _fOrderId =
        _fOrderId ?? SqlSyntax.setField(_fOrderId, 'orderId', DbType.text);
  }

  static TableField? _fCategoryName;
  static TableField get categoryName {
    return _fCategoryName = _fCategoryName ??
        SqlSyntax.setField(_fCategoryName, 'categoryName', DbType.text);
  }

  static TableField? _fProductName;
  static TableField get productName {
    return _fProductName = _fProductName ??
        SqlSyntax.setField(_fProductName, 'productName', DbType.text);
  }

  static TableField? _fModelNumber;
  static TableField get modelNumber {
    return _fModelNumber = _fModelNumber ??
        SqlSyntax.setField(_fModelNumber, 'modelNumber', DbType.text);
  }

  static TableField? _fPrice;
  static TableField get price {
    return _fPrice =
        _fPrice ?? SqlSyntax.setField(_fPrice, 'price', DbType.text);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fManufactureDate;
  static TableField get manufactureDate {
    return _fManufactureDate = _fManufactureDate ??
        SqlSyntax.setField(_fManufactureDate, 'manufactureDate', DbType.text);
  }

  static TableField? _fManufactureAddress;
  static TableField get manufactureAddress {
    return _fManufactureAddress = _fManufactureAddress ??
        SqlSyntax.setField(
            _fManufactureAddress, 'manufactureAddress', DbType.text);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion SqlProductsFields

//region SqlProductsManager
class SqlProductsManager extends SqfEntityProvider {
  SqlProductsManager()
      : super(Cart(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'products';
  static const List<String> _primaryKeyList = ['productId'];
  static const String _whereStr = 'productId=?';
}

//endregion SqlProductsManager
class CartSequenceManager extends SqfEntityProvider {
  CartSequenceManager() : super(Cart());
}
// END OF ENTITIES
